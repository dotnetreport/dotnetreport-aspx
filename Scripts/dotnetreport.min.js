/// dotnet Report Builder view model v4.3.1
/// License has to be purchased for use
/// 2018-2022 (c) www.dotnetreport.com

function pagerViewModel(e) { e = e || {}; var r = this; r.pageSize = ko.observable(e.pageSize || 30), r.pages = ko.observable(e.pages || 1), r.currentPage = ko.observable(e.currentPage || 1), r.pauseNavigation = ko.observable(!1), r.totalRecords = ko.observable(0), r.sortColumn = ko.observable(), r.sortDescending = ko.observable(), r.isFirstPage = ko.computed((function () { return 1 == this.currentPage() }), r), r.isLastPage = ko.computed((function () { return this.currentPage() == this.pages() }), r), r.currentPage.subscribe((function (e) { e > r.pages() && r.currentPage(0 == r.pages() ? 1 : r.pages()), e < 1 && r.currentPage(1) })), r.previous = function () { r.pauseNavigation() || r.isFirstPage() || isNaN(r.currentPage()) || r.currentPage(Number(r.currentPage()) - 1) }, r.next = function () { r.pauseNavigation() || r.isLastPage() || isNaN(r.currentPage()) || r.currentPage(Number(r.currentPage()) + 1) }, r.first = function () { r.pauseNavigation() || r.currentPage(1) }, r.last = function () { r.pauseNavigation() || r.currentPage(r.pages()) }, r.changeSort = function (e) { r.sortColumn() == e ? r.sortDescending(!r.sortDescending()) : r.sortDescending(!1), r.sortColumn(e), 1 != r.currentPage() && r.currentPage(1) } } function formulaFieldViewModel(e) { e = e || {}; var r = this; r.fieldId = ko.observable(e.fieldId), r.isParenthesesStart = ko.observable(e.isParenthesesStart), r.isParenthesesEnd = ko.observable(e.isParenthesesEnd), r.formulaOperation = ko.observable(e.formulaOperation), r.isConstantValue = ko.observable(!!e.constantValue), r.constantValue = ko.observable(e.constantValue) } function linkFieldViewModel(e, r) { e = e || {}; var t = this, o = !0; t.linkTypes = ["Report", "URL"], t.selectedLinkType = ko.observable(e.LinksToReport ? "Report" : "URL"), t.allFields = ko.observableArray([]), t.LinksToReport = ko.observable(e.LinksToReport || !1), t.LinkedToReportId = ko.observable(), t.SendAsFilterParameter = ko.observable(e.SendAsFilterParameter || !1), t.SelectedFilterId = ko.observable(e.SelectedFilterId), t.LinkToUrl = ko.observable(e.LinkToUrl), t.SendAsQueryParameter = ko.observable(e.SendAsQueryParameter || !1), t.QueryParameterName = ko.observable(e.QueryParameterName), t.toJs = function () { return { LinksToReport: t.LinksToReport(), LinkedToReportId: t.LinkedToReportId(), SendAsFilterParameter: t.SendAsFilterParameter(), SelectedFilterId: t.SelectedFilterId(), LinkToUrl: t.LinkToUrl(), SendAsQueryParameter: t.SendAsQueryParameter(), QueryParameterName: t.QueryParameterName() } }, t.selectedLinkType.subscribe((function () { t.LinksToReport("Report" == t.selectedLinkType()) })), t.LinkedToReportId.subscribe((function (a) { if (a) return ajaxcall({ url: r.apiUrl, data: { method: "/ReportApi/LoadReport", model: JSON.stringify({ reportId: a }) } }).done((function (r) { r.d && (r = r.d), r.result && (r = r.result), r.UseStoredProc ? t.allFields(_.map(r.SelectedParameters, (function (e) { return { fieldId: e.ParameterId, fieldName: e.ParameterName } }))) : t.allFields(r.SelectedFields), o && t.LinksToReport() && (t.SelectedFilterId(e.SelectedFilterId), o = !1) })) })), t.LinksToReport() && t.LinkedToReportId(e.LinkedToReportId), t.isInputValid = function (e) { return (null == $(e).attr("data-notempty") || 0 != $(e).children("option").length) && (e.validity ? e.validity.valid : null == $(e).attr("required") || "" != $(e).val()) }, t.validateLink = function () { if (null != r.linkModal) { var e = r.linkModal.find("input,select"), o = !0; $(".needs-validation").removeClass("was-validated"); for (var a = 0; a < e.length; a++)$(e[a]).removeClass("is-invalid"), t.isInputValid(e[a]) || (o = !1, $(".needs-validation").addClass("was-validated"), $(e[a]).addClass("is-invalid")); return o } }, t.clear = function () { t.LinksToReport(!0), t.selectedLinkType("Report"), t.LinkedToReportId(null), t.SendAsFilterParameter(!1), t.SelectedFilterId(null), t.LinkToUrl = ko.observable(null), t.SendAsQueryParameter(!1), t.QueryParameterName(null) } } function scheduleBuilder(e) { var r = this; r.options = ["day", "week", "month", "year", "once"], r.showAtTime = ko.observable(!0), r.showDays = ko.observable(!1), r.showMonths = ko.observable(!1), r.showDates = ko.observable(!1), r.selectedOption = ko.observable("day"), r.selectedDays = ko.observableArray([]), r.selectedMonths = ko.observableArray([]), r.selectedDates = ko.observableArray([]), r.selectedHour = ko.observable("12"), r.selectedMinute = ko.observable("00"), r.selectedAmPm = ko.observable("PM"), r.selectedDate = ko.observable(); var t = "Last day of the month"; r.days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], r.months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], r.dates = [], r.hours = [], r.minutes = ["00", "15", "30", "45"]; for (var o = 1; o <= 31; o++)r.dates.push(o); for (o = 1; o <= 12; o++)r.hours.push(o); r.dates.push(t), r.hasSchedule = ko.observable(!1), r.emailTo = ko.observable(""), r.hasScheduleStart = ko.observable(!1), r.hasScheduleEnd = ko.observable(!1), r.scheduleStart = ko.observable(), r.scheduleEnd = ko.observable(), r.selectedOption.subscribe((function (e) { switch (r.selectedDays([]), r.selectedMonths([]), r.selectedDates([]), e) { case "once": case "day": r.showDays(!1), r.showDates(!1), r.showMonths(!1); break; case "week": r.showDays(!0), r.showDates(!1), r.showMonths(!1); break; case "month": r.showDays(!1), r.showDates(!0), r.showMonths(!1); break; case "year": r.showDays(!1), r.showDates(!0), r.showMonths(!0) } })), r.toJs = function () { return r.hasSchedule() ? { SelectedOption: r.selectedOption(), SelectedDays: r.selectedDays().join(","), SelectedMonths: r.selectedMonths().join(","), SelectedDates: "once" == r.selectedOption() ? r.selectedDate() : r.selectedDates().join(","), SelectedHour: r.selectedHour(), SelectedMinute: r.selectedMinute(), SelectedAmPm: r.selectedAmPm(), EmailTo: r.emailTo(), UserId: e, ScheduleStart: r.hasScheduleStart() ? r.scheduleStart() : "", ScheduleEnd: r.hasScheduleEnd() ? r.scheduleEnd() : "" } : null }, r.fromJs = function (e) { r.hasSchedule(!!e), e = e || { SelectedOption: "day", SelectedDays: "", SelectedMonths: "", SelectedDates: "" }, r.selectedOption(e.SelectedOption), r.selectedDays(e.SelectedDays.split(",")), r.selectedMonths(e.SelectedMonths.split(",")), "once" == r.selectedOption() ? r.selectedDate(e.SelectedDates) : e.SelectedDates == t ? r.selectedDates([e.SelectedDates]) : r.selectedDates(_.map(e.SelectedDates.split(","), (function (e) { return parseInt(e) }))), r.selectedHour(e.SelectedHour || "12"), r.selectedMinute(e.SelectedMinute || "00"), r.selectedAmPm(e.SelectedAmPm || "PM"), r.emailTo(e.EmailTo || ""), r.scheduleStart(e.ScheduleStart ? new Date(1 * e.ScheduleStart.match(/\d+/)[0]) : ""), r.scheduleEnd(e.ScheduleEnd ? new Date(1 * e.ScheduleEnd.match(/\d+/)[0]) : ""), r.hasScheduleStart(!!e.ScheduleStart), r.hasScheduleEnd(!!e.ScheduleEnd) }, r.clear = function () { r.fromJs(null) } } function filterGroupViewModel(e) { e = e || {}; var r = this; r.isRoot = !0 === e.isRoot, r.AndOr = ko.observable(e.AndOr || " AND "), r.Filters = ko.observableArray([]), r.FilterGroups = ko.observableArray([]), r.AddFilterGroup = function (t) { var o = new filterGroupViewModel({ parent: e.parent, AndOr: t.AndOr, options: e.options }); return r.FilterGroups.push(o), o }, r.RemoveFilterGroup = function (e) { r.FilterGroups.remove(e) }, r.GetValuesInFilterGroupForFieldAndTable = function (e, t) { var o = null; return _.forEach(r.Filters(), (function (r) { if (r.Field() && r.Field().hasForeignKey && r.Field().foreignTable == e && r.Field().foreignKey == t) return o = r, !1 })), o }, r.AddFilter = function (t, o) { t = t || {}; var a = ko.observableArray([]), l = ko.observableArray([]), n = new URL(window.location.href), i = n.searchParams.get("filterId"), s = n.searchParams.get("filterValue"); i && s && t.FieldId == parseInt(i) && (t.Value1 = s, t.Operator = "="), t.Value1 && a.push({ id: t.Value1, text: t.Value1 }), t.Value2 && a.push({ id: t.Value2, text: t.Value2 }); var d = ko.observable(), u = "in" == t.Operator || "not in" == t.Operator ? (t.Value1 || "").split(",") : [], c = { AndOr: ko.observable(o ? " AND " : t.AndOr), Field: d, Operator: ko.observable(t.Operator), Value: ko.observable(t.Value1), Value2: ko.observable(t.Value2), ValueIn: ko.observableArray(u), LookupList: a, ParentList: l, ParentIn: ko.observableArray([]), Apply: ko.observable(null == t.Apply || t.Apply), IsFilterOnFly: !0 === o, showParentFilter: ko.observable(!0) }; function p(r, t) { ajaxcall({ url: e.options.apiUrl, data: { method: "/ReportApi/GetLookupList", model: JSON.stringify({ fieldId: r, dataFilters: t }) } }).done((function (r) { r.d && (r = r.d), r.result && (r = r.result), ajaxcall({ type: "POST", url: e.options.lookupListUrl, data: JSON.stringify({ lookupSql: r.sql, connectKey: r.connectKey }) }).done((function (e) { e.d && (e = e.d), e.result && (e = e.result), a(e), u.length > 0 && (c.ValueIn(u), u = []) })) })) } c.Operator.subscribe((function () { c.Value(null), c.Value2(null) })); var f = !0; return d.subscribe((function (t) { if (f || c.Value(null), t && t.hasForeignKey) if (t.hasForeignParentKey) { c.ParentIn.subscribe((function (r) { if (r && r.length > 0) { var o = Object.assign({}, e.options.dataFilters || {}); o[t.foreignParentApplyTo] = r.join(), p(t.fieldId, o) } else p(t.fieldId, e.options.dataFilters) })); var o = r.GetValuesInFilterGroupForFieldAndTable(t.foreignParentTable, t.foreignParentKeyField); o ? (c.showParentFilter(!1), o.Value.subscribe((function (e) { c.ParentIn(e ? [e] : null) })), o.ValueIn.subscribe((function (e) { c.ParentIn(e) })), c.ParentIn("=" == o.Operator() ? o.Value() ? [o.Value()] : [] : o.ValueIn())) : (ajaxcall({ url: e.options.apiUrl, data: { method: "/ReportApi/GetLookupList", model: JSON.stringify({ fieldId: t.fieldId, dataFilters: e.options.dataFilters, parentLookup: !0 }) } }).done((function (r) { r.d && (r = r.d), r.result && (r = r.result), ajaxcall({ type: "POST", url: e.options.lookupListUrl, data: JSON.stringify({ lookupSql: r.sql, connectKey: r.connectKey }) }).done((function (e) { e.d && (e = e.d), e.result && (e = e.result), l(e) })) })), p(t.fieldId, e.options.dataFilters)) } else p(t.fieldId, e.options.dataFilters); t && t.restrictedDateRange && "DateTime" == t.fieldType && (c.Value.subscribe((function (e) { if (e && "range" == c.Operator() && (r.isRangeValid(e, t.restrictedDateRange) || (toastr.error("Filter range is more than " + t.restrictedDateRange + ". Please choose a shorter date range"), c.Value(null))), e && "between" == c.Operator()) { var o = c.Value2(); r.isDate(e) && r.isDate(o) && !r.isBetweenValid(e, c.Value2(), t.restrictedDateRange) && (toastr.error("Filter range is more than " + t.restrictedDateRange + ". Please choose a shorter date range"), c.Value(null)) } })), c.Value2.subscribe((function (e) { var o = c.Value(); r.isDate(o) && r.isDate(e) && "between" == c.Operator() && (r.isBetweenValid(o, e, t.restrictedDateRange) || (toastr.error("Filter range is more than " + t.restrictedDateRange + ". Please choose a shorter date range"), c.Value2(null))) }))) })), t.FieldId && d(e.parent.FindField(t.FieldId)), c.compareTo = ko.computed((function () { return d() ? _.filter(e.parent.AdditionalSeries(), (function (e) { return e.Field().fieldId == d().fieldId })) : [] })), r.Filters.push(c), f = !1, c }, r.RemoveFilter = function (e) { r.Filters.remove(e) }, r.isRangeValid = function (e, r) { if (!e || !r) return !1; var t = r.split(" "), o = parseInt(t[0]), a = t[1], l = !0; return ("This Month To Date" == e || e.indexOf("Month") >= 0) && ("Years" == a && (l = !1), "Days" == a && o < 30 && (l = !1)), "This Year To Date" == e ? ("Months" == a && o < 12 && (l = !1), "Days" == a && o < 365 && (l = !1)) : e.indexOf("Year") >= 0 ? ("Months" == a && o < 12 && (l = !1), "Days" == a && o > 365 && (l = !1)) : e.indexOf("Week") >= 0 ? "Days" == a && o < 7 && (l = !1) : "Last 30 Days" == e && "Days" == a && o < 30 && (l = !1), l }, r.isBetweenValid = function (e, r, t) { var o = t.split(" "), a = parseInt(o[0]), l = o[1], n = (new Date(r) - new Date(e)) / 864e5, i = !0; switch (l) { case "Days": i = n < a && n > 0; break; case "Months": i = n < 30 * a; break; case "Years": i = n < 365 * a }return i }, r.isDate = function (e) { return !!e && ("Invalid Date" !== new Date(e) && !isNaN(new Date(e))) } } var manageAccess = function (e) { return { clientId: ko.observable(), users: _.map(e.users || [], (function (e) { return { selected: ko.observable(!1), value: ko.observable(e.id ? e.id : e), text: e.text ? e.text : e } })), userRoles: _.map(e.userRoles || [], (function (e) { return { selected: ko.observable(!1), value: ko.observable(e.id ? e.id : e), text: e.text ? e.text : e } })), viewOnlyUsers: _.map(e.users || [], (function (e) { return { selected: ko.observable(!1), value: ko.observable(e.id ? e.id : e), text: e.text ? e.text : e } })), viewOnlyUserRoles: _.map(e.userRoles || [], (function (e) { return { selected: ko.observable(!1), value: ko.observable(e.id ? e.id : e), text: e.text ? e.text : e } })), deleteOnlyUsers: _.map(e.users || [], (function (e) { return { selected: ko.observable(!1), value: ko.observable(e.id ? e.id : e), text: e.text ? e.text : e } })), deleteOnlyUserRoles: _.map(e.userRoles || [], (function (e) { return { selected: ko.observable(!1), value: ko.observable(e.id ? e.id : e), text: e.text ? e.text : e } })), getAsList: function (e) { var r = ""; return _.forEach(e, (function (e) { e.selected() && (r += (r ? "," : "") + e.value()) })), r }, setupList: function (e, r) { _.forEach(e, (function (e) { r.indexOf(e.value()) >= 0 ? e.selected(!0) : e.selected(!1) })) }, isDashboard: ko.observable(1 == e.isDashboard) } }, headerDesigner = function (e) { var r = this; function t(e) { var t = r.canvas.getActiveObject(); return t && t[e] || "" } function o(e, t) { var o = r.canvas.getActiveObject(); o && (o.set(e, t).setCoords(), r.canvas.renderAll()) } r.canvas = null, r.initiated = !1, r.selectedObject = ko.observable(), r.UseReportHeader = ko.observable(!0 === e.useReportHeader), r.init = function (t) { if (!r.initiated && (r.initiated = !0, r.canvas = new fabric.Canvas(e.canvasId), !0 !== t)) { var o = r.canvas; r.objectProperties = { fontFamily: ko.observable(), fontSize: ko.observable(), fontColor: ko.observable(), fontBackcolor: ko.observable(), textAlign: ko.observable(), fontBold: ko.observable(), fontItalic: ko.observable(), fontUnderline: ko.observable() }, o.on("object:moving", (function (e) { var r = e.target; r.currentHeight > r.canvas.height || r.currentWidth > r.canvas.width || (r.setCoords(), (r.getBoundingRect().top < 0 || r.getBoundingRect().left < 0) && (r.top = Math.max(r.top, r.top - r.getBoundingRect().top), r.left = Math.max(r.left, r.left - r.getBoundingRect().left)), (r.getBoundingRect().top + r.getBoundingRect().height > r.canvas.height || r.getBoundingRect().left + r.getBoundingRect().width > r.canvas.width) && (r.top = Math.min(r.top, r.canvas.height - r.getBoundingRect().height + r.top - r.getBoundingRect().top), r.left = Math.min(r.left, r.canvas.width - r.getBoundingRect().width + r.left - r.getBoundingRect().left))) })), o.on("selection:created", (function (e) { r.selectedObject(e), r.objectProperties.fontFamily(r.getFontFamily()), r.objectProperties.fontBold(r.getFontBold()), r.objectProperties.fontItalic(r.getFontItalic()), r.objectProperties.fontColor(r.getFontColor()), r.objectProperties.fontUnderline(r.getFontUnderline()), r.objectProperties.textAlign(r.getTextAlign()) })), o.on("selection:cleared", (function (e) { r.selectedObject(null) })) } }, r.resizeCanvas = function (t) { var o = r.canvas; null != o && ((t = isNaN(t) ? $("#" + e.canvasId).parent().parent().width() : t) > 100 && o.setWidth(t), o.renderAll()) }, r.dispose = function () { r.canvas && (r.canvas.dispose(), r.initiated = !1) }, r.saveCanvas = function () { var t = JSON.stringify(r.canvas.toJSON()); return ajaxcall({ url: e.apiUrl.replace("CallReportApi", "PostReportApi"), type: "POST", data: JSON.stringify({ method: "/ReportApi/SaveReportHeader", headerJson: t, useReportHeader: r.UseReportHeader() }) }).done((function (e) { e.d && (e = e.d), e.result && (e = e.result), toastr.success("Report Header changes saved") })) }, r.loadCanvas = function (t) { var o = r.canvas; return ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetReportHeader", model: JSON.stringify({}) } }).done((function (e) { e.d && (e = e.d), e.result && (e = e.result), r.UseReportHeader(e.useReportHeader), o.loadFromJSON(e.headerJson, o.renderAll.bind(o), (function (e, r) { !0 === t && r.set("selectable", !1) })) })) }, r.addText = function () { r.canvas.add(new fabric.Textbox("Enter Text", { left: 50, top: 50, fontFamily: "arial", fontWeight: "", originX: "left", hasRotatingPoint: !0, centerTransform: !0, width: 300 })) }, r.addLine = function () { r.canvas.add(new fabric.Line([50, 100, 300, 100], { left: 20, top: 20, stroke: "#000000" })) }, r.uploadImage = function (e) { if (e.size > 1024e3) return toastr.error("Max file size is 1MB. Please choose a smaller image file. "), !1; var t = new FileReader; t.onload = function (e) { var t = new Image; t.src = e.target.result, t.onload = function () { var e = new fabric.Image(t); e.set({ angle: 0 }), r.canvas.centerObject(e), r.canvas.add(e), r.canvas.renderAll() } }, t.readAsDataURL(e) }, r.remove = function () { var e = r.canvas; e.remove(e.getActiveObject()) }, r.getText = function () { return t("text") }, r.setText = function (e) { o("text", e) }, r.getFontFamily = function () { return t("fontFamily").toLowerCase() }, r.setFontFamily = function (e, r) { o("fontFamily", r.currentTarget.value) }, r.getFontBold = function () { return t("fontWeight").toLowerCase() }, r.setFontBold = function (e, r) { o("fontWeight", "bold" == t("fontWeight") ? "" : "bold") }, r.getFontItalic = function () { return t("fontStyle").toLowerCase() }, r.setFontItalic = function (e, r) { o("fontStyle", "italic" == t("fontStyle") ? "" : "italic") }, r.getFontColor = function () { return t("stroke") }, r.setFontColor = function (e, r) { o("stroke", r.currentTarget.value), o("fill", r.currentTarget.value) }, r.getFontUnderline = function () { return t("underline").toLowerCase() }, r.setFontUnderline = function (e, r) { o("underline", t("underline") ? "" : "underline") }, r.getTextAlign = function () { return t("textAlign") }, r.setTextAlign = function (e, r) { o("textAlign", r.currentTarget.value.toLowerCase()) } }, reportViewModel = function (e) { var r = this; (e = e || {}).userSettings = e.userSettings || {}, e.userId = e.userSettings.currentUserId || "", e.users = e.userSettings.users, e.userRoles = e.userSettings.userRoles, r.currentUserId = e.userSettings.userId, r.currentUserRole = (e.userSettings.currentUserRoles || []).join(), r.currentUserName = e.userSettings.currentUserName, r.allowAdmin = ko.observable(e.userSettings.allowAdminMode), r.userIdForSchedule = e.userSettings.userIdForSchedule || r.currentUserId, r.ChartData = ko.observable(), r.ReportName = ko.observable(), r.ReportType = ko.observable("List"), r.ReportDescription = ko.observable(), r.FolderID = ko.observable(), r.ReportID = ko.observable(), r.Tables = ko.observableArray([]), r.Procs = ko.observableArray([]), r.SelectedTable = ko.observable(), r.SelectedProc = ko.observable(), r.ChooseFields = ko.observableArray([]), r.ChosenFields = ko.observableArray([]), r.selectedTableFields = [], r.SelectedFields = ko.observableArray([]), r.SelectFields = ko.observableArray([]), r.SelectedField = ko.observable(), r.AdditionalSeries = ko.observableArray([]), r.ReportSeries = "", r.IncludeSubTotal = ko.observable(!1), r.ShowUniqueRecords = ko.observable(!1), r.AggregateReport = ko.observable(!1), r.SortByField = ko.observable(), r.SortDesc = ko.observable(!1), r.EditFiltersOnReport = ko.observable(!1), r.UseReportHeader = ko.observable(!1), r.HideReportHeader = ko.observable(!1), r.FilterGroups = ko.observableArray(), r.FilterGroups.subscribe((function (t) { t && 0 == t.length && r.FilterGroups.push(new filterGroupViewModel({ isRoot: !0, parent: r, options: e })) })), r.addSortField = function (e, t) { var o = { sortByFieldId: ko.observable(e), sortDesc: ko.observable(!0 === t), remove: function () { r.SortFields.remove(o) } }; r.SortFields.push(o) }, r.SortFields = ko.observableArray([]), r.FilterGroups([]), r.SaveReport = ko.observable(!0), r.ShowDataWithGraph = ko.observable(!0), r.ShowOnDashboard = ko.observable(!1), r.ReportMode = ko.observable(e.reportMode || "start"), r.Folders = ko.observableArray(), r.SavedReports = ko.observableArray([]), r.SelectedFolder = ko.observable(null), r.CanSaveReports = ko.observable(!0), r.CanManageFolders = ko.observable(!0), r.CanEdit = ko.observable(!0), r.useReportHeader = ko.observable(!1), r.fieldFormatTypes = ["Auto", "Number", "Decimal", "Currency", "Percentage", "Date", "Date and Time", "Time", "String"], r.decimalFormatTypes = ["Number", "Decimal", "Currency", "Percentage"], r.dateFormatTypes = ["Date", "Date and Time", "Time"], r.fieldAlignments = ["Auto", "Left", "Right", "Center"], r.designingHeader = ko.observable(!1), r.headerDesigner = new headerDesigner({ canvasId: e.reportHeader, apiUrl: e.apiUrl }), r.initHeaderDesigner = function () { r.headerDesigner.init(), r.headerDesigner.loadCanvas(!1), r.designingHeader(!0) }, r.ReportResult = ko.observable({ HasError: ko.observable(!1), ReportDebug: ko.observable(!1), Exception: ko.observable(), Warnings: ko.observable(), ReportSql: ko.observable(), ReportData: ko.observable(null), SubTotals: ko.observableArray([]) }), r.useStoredProc = ko.observable(!1), r.StoredProcId = ko.observable(), r.Parameters = ko.observableArray([]), r.showParameters = ko.observable(!0), r.pager = new pagerViewModel, r.currentSql = ko.observable(), r.currentConnectKey = ko.observable(), r.adminMode = ko.observable(!1), r.allExpanded = ko.observable(!1), r.pager.currentPage(1), r.x = ko.observable(0), r.y = ko.observable(0), r.width = ko.observable(3), r.height = ko.observable(2), r.columnDetails = ko.observableArray([]), r.useStoredProc.subscribe((function () { r.SelectedTable(null), r.SelectedProc(null), r.SelectedFields([]), r.clearReport() })), r.adminMode.subscribe((function (e) { r.LoadAllSavedReports(), e ? (r._cansavereports = r.CanSaveReports(), r.SaveReport(!0), r.CanSaveReports(!0)) : r.CanSaveReports(r._cansavereports), localStorage && localStorage.setItem("reportAdminMode", e) })), r.manageAccess = manageAccess(e), r.pager.currentPage.subscribe((function () { r.ExecuteReportQuery(r.currentSql(), r.currentConnectKey(), r.ReportSeries) })), r.pager.pageSize.subscribe((function () { r.ExecuteReportQuery(r.currentSql(), r.currentConnectKey(), r.ReportSeries) })), r.createNewReport = function () { r.clearReport(), r.ReportMode("generate") }, r.ReportType.subscribe((function (e) { "List" == e ? r.AggregateReport(!1) : r.AggregateReport(!0) })), r.setReportType = function (e) { r.ReportType(e) }, r.cancelCreateReport = function () { bootbox.confirm("Are you sure you would like to cancel editing this Report?", (function (t) { t && (r.clearReport(), e.reportWizard.modal("hide"), r.ReportMode("start")) })) }, r.FlyFilters = ko.computed((function () { var e = []; return _.forEach(r.FilterGroups(), (function (r) { _.forEach(r.Filters(), (function (r) { r.IsFilterOnFly && e.push(r) })) })), e })), r.enabledFields = ko.computed((function () { return _.filter(r.SelectedFields(), (function (e) { return !e.disabled() })) })), r.scheduleBuilder = new scheduleBuilder(r.userIdForSchedule), r.ManageFolder = { FolderName: ko.observable(), IsNew: ko.observable(!1), newFolder: function () { r.ManageFolder.IsNew(!0), r.ManageFolder.FolderName(""), $("#folderModal").modal("show") }, editFolder: function () { null != r.SelectedFolder() ? 0 != r.SelectedFolder().Id ? (r.ManageFolder.IsNew(!1), r.ManageFolder.FolderName(r.SelectedFolder().FolderName), $("#folderModal").modal("show")) : toastr.error("Cannot edit Default folder") : toastr.error("Please choose a folder first") }, saveFolder: function () { if ("" != r.ManageFolder.FolderName()) { var t = r.ManageFolder.IsNew() ? 0 : r.SelectedFolder().Id; if (0 != _.filter(r.Folders(), (function (e) { return e.FolderName.toLowerCase() == r.ManageFolder.FolderName().toLowerCase() && (0 == t || 0 != t && e.Id != t) })).length) return toastr.error("Folder name is already in use, please choose a different Folder Name"), !1; ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/SaveFolder", model: JSON.stringify({ folderId: t, folderName: r.ManageFolder.FolderName() }) } }).done((function (e) { if (e.d && (e = e.d), e.result && (e = e.result), r.ManageFolder.IsNew()) r.Folders.push({ Id: e, FolderName: r.ManageFolder.FolderName() }); else { var t = r.SelectedFolder(); r.Folders.remove(r.SelectedFolder()), t.FolderName = r.ManageFolder.FolderName(), r.Folders.push(t) } $("#folderModal").modal("hide") })) } else toastr.error("Please enter a Folder Name") }, deleteFolder: function () { null != r.SelectedFolder() ? 0 != r.SelectedFolder().Id ? bootbox.confirm("Are you sure you want to delete this Folder?\n\nWARNING: Deleting a folder will delete all reports in the folder and this action cannot be undone.", (function (t) { t && ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/DeleteFolder", model: JSON.stringify({ folderId: r.SelectedFolder().Id }) } }).done((function () { r.Folders.remove(r.SelectedFolder()), r.SelectedFolder(null) })) })) : toastr.error("Cannot delete Default folder") : toastr.error("Please choose a folder first") } }, r.reportsInFolder = ko.computed((function () { return null == r.SelectedFolder() ? [] : _.filter(r.SavedReports(), (function (e) { return e.folderId == r.SelectedFolder().Id })) })), r.clearReport = function () { r.ReportName(""), r.ReportDescription(""), r.ReportType("List"), r.FolderID(null == r.SelectedFolder() ? 0 : r.SelectedFolder().Id), r.ChosenFields([]), r.SelectedFields([]), r.SelectFields([]), r.SelectedField(null), r.SelectedProc(null), r.SelectedTable(null), r.IncludeSubTotal(!1), r.EditFiltersOnReport(!1), r.ShowUniqueRecords(!1), r.AggregateReport(!1), r.SortByField(null), r.SortDesc(!1), r.FilterGroups([]), r.ReportID(0), r.SaveReport(r.CanSaveReports()), r.scheduleBuilder.clear(), r.SortFields([]), r.isFormulaField(!1) }, r.SelectedProc.subscribe((function (t) { if (null != t) { r.ChooseFields([]), r.SelectedFields([]), r.selectedTableFields = []; var o = _.filter(t.Columns, (function (e) { return 0 == e.DoNotDisplay })), a = _.map(o, (function (e) { var o = ko.toJS(t.SelectedFields && t.SelectedFields.length ? _.find(t.SelectedFields, { fieldName: e.DisplayName }) : null) || r.getEmptyFormulaField(); return o.fieldName = e.DisplayName, o.tableName = t.DisplayName, o.procColumnId = e.Id, o.procColumnName = e.ColumnName, r.setupField(o) })); t.SelectedFields = null, r.SelectedFields(a); var l = !0, n = _.map(t.Parameters, (function (r) { var o = ko.toJS(t.SelectedParameters && t.SelectedParameters.length ? _.find(t.SelectedParameters, { ParameterName: r.ParameterName }) : null); return r.operators = ["="], r.ParameterValue && r.operators.push("is default"), r.Required || r.operators.push("is blank"), r.Required || r.operators.push("is null"), r.Operator ? (r.Operator(o ? o.Operator : "="), r.Value(o ? o.Value : r.ParameterValue)) : (r.Operator = ko.observable(o ? o.Operator : "="), r.Value = ko.observable(o ? o.Value : r.ParameterValue), r.Operator.subscribe((function (e) { "is default" == e && r.Value(r.ParameterValue) }))), r.Field = { hasForeignKey: r.ForeignKey, fieldType: r.ParameterDataTypeString, hasForeignParentKey: !1 }, r.LookupList = ko.observableArray([]), r.Value() && r.LookupList.push({ id: r.Value(), text: r.Value() }), r.ForeignKey && ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetPrmLookupList", model: JSON.stringify({ parameterId: r.Id, procId: t.Id, dataFilters: e.dataFilters }) } }).done((function (t) { t.d && (t = t.d), t.result && (t = t.result), ajaxcall({ type: "POST", url: e.lookupListUrl, data: JSON.stringify({ lookupSql: t.sql, connectKey: t.connectKey }) }).done((function (e) { e.d && (e = e.d), e.result && (e = e.result), r.LookupList(e) })) })), r.Hidden || (l = !1), r })); t.SelectedParameters = null, r.Parameters(n), r.showParameters(!l) } })), r.FindInFilterGroup = function (e) { var t = !1; return _.forEach(r.FilterGroups(), (function (r) { _.forEach(r.Filters(), (function (r) { if (r.Field() && (r.Field().FieldId == e || r.Field().fieldId == e)) return t = !0, !1 })) })), t }, r.SelectedFields.subscribe((function (e) { var t = e.length > 0 ? e[e.length - 1] : null; if (t && (t.forceFilter || t.forceFilterForTable) && !r.FindInFilterGroup(t.fieldId)) { var o = r.FilterGroups()[0].AddFilter(); setTimeout((function () { t.forced = !0, o.Field(t) }), 500) } if (t) { var a = _.filter(r.selectedTableFields, (function (e) { return 1 == e.forceFilterForTable })), l = _.filter(r.selectedTableFields, (function (e) { return 0 == e.forceFilterForTable })).map((function (e) { return e.fieldId })); if (null == _.find(e, (function (e) { return l.indexOf(e.fieldId) >= 0 })) || 0 == a.length) return; for (var n = 0; n < a.length; n++) { var i = a[n]; _.find(r.SelectedFields(), (function (e) { return e.fieldId == i.fieldId })) || (i.disabled(!0), r.SelectedFields.push(i)) } } })), r.loadTableFields = function (t) { return ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetFields", model: JSON.stringify({ tableId: t.tableId, includeDoNotDisplay: !1 }) } }).done((function (e) { e.d && (e = e.d), e.result && (e = e.result); var o = _.map(e, (function (e, o) { var a = _.filter(r.SelectedFields(), (function (r) { return r.fieldId == e.fieldId })); return a.length > 0 ? a[0] : (e.tableName = t.tableName, r.setupField(e)) })); r.ChooseFields(o), r.selectedTableFields = o })) }, r.SelectedTable.subscribe((function (e) { return r.SelectedProc(null), null == e ? (r.ChooseFields([]), void (r.selectedTableFields = [])) : r.loadTableFields(e) })), r.MoveChosenFields = function () { _.forEach(r.ChosenFields(), (function (e) { _.filter(r.SelectedFields(), (function (r) { return r.fieldId == e.fieldId })).length > 0 ? toastr.error(e.fieldName + " is already Selected") : r.SelectedFields.push(e) })) }, r.MoveAllFields = function () { _.forEach(r.ChooseFields(), (function (e) { 0 === _.filter(r.SelectedFields(), (function (r) { return r.fieldId == e.fieldId })).length && r.SelectedFields.push(e) })) }, r.RemoveSelectedFields = function () { _.forEach(r.ChooseFields(), (function (e) { r.SelectedFields.remove(e) })) }, r.isFormulaField = ko.observable(!1), r.formulaFields = ko.observableArray([]), r.formulaFieldLabel = ko.observable(""), r.formulaDataFormat = ko.observable(""), r.formulaDecimalPlaces = ko.observable(), r.formulaOnlyHasDateFields = ko.computed((function () { var e = r.formulaFields(); if (e.length <= 0) return !1; var t = !0; return _.forEach(e, (function (e) { if (!e.setupFormula.isParenthesesStart() && !e.setupFormula.isParenthesesEnd() && !e.setupFormula.isConstantValue() && e.fieldType && e.fieldType.indexOf("Date") < 0) return t = !1, !1 })), t })), r.formulaFields.subscribe((function (e) { if (e) { var t = r.formulaOnlyHasDateFields(); t && ["Days", "Hours", "Minutes", "Seconds"].indexOf(r.formulaDataFormat()) < 0 && r.formulaDataFormat("Days"), !t && ["String", "Integer", "Double"].indexOf(r.formulaDataFormat()) < 0 && r.formulaDataFormat("String") } })), r.formulaHasConstantValue = ko.computed((function () { var e = r.formulaFields(); if (e.length <= 0) return !1; var t = !1; return _.forEach(e, (function (e) { if (!e.setupFormula.isParenthesesStart() && !e.setupFormula.isParenthesesEnd() && e.setupFormula.isConstantValue()) return t = !0, !1 })), t })), r.getEmptyFormulaField = function () { return { tableName: "Custom", fieldName: r.formulaFieldLabel() || "Custom", fieldFormat: r.formulaDataFormat() || "String", decimalPlaces: r.formulaDecimalPlaces(), fieldType: "Custom", aggregateFunction: "", filterOnFly: !1, disabled: !1, groupInGraph: !1, dontSubTotal: !1, hideInDetail: !1, linkField: !1, linkFieldItem: null, fieldAggregate: ["Group", "Count"], fieldAggregateWithDrilldown: ["Group", "Count"], isFormulaField: !0, hasForeignKey: !1, fieldFilter: ["=", "<>", ">=", ">", "<", "<="], formulaItems: r.formulaFields(), forceFilterForTable: !1 } }, r.selectedFieldsCanFilter = ko.computed((function () { return _.filter(r.SelectedFields(), (function (e) { return !e.isFormulaField() })) })), r.clearFormulaField = function () { r.formulaFields([]), r.formulaFieldLabel(""), r.formulaDataFormat("String"), r.formulaDecimalPlaces(null) }, r.isFormulaField.subscribe((function () { r.clearFormulaField() })), r.saveFormulaField = function () { if (0 != r.formulaFields().length) if (r.validateReport()) { var e = r.getEmptyFormulaField(); r.SelectedFields.push(r.setupField(e)), r.clearFormulaField(), r.isFormulaField(!1) } else toastr.error("Please correct validation issues"); else toastr.error("Please select some items for the Custom Field") }, r.showFormulaOperation = function (e) { var t = r.formulaFields().length; return !(t <= 1 || e == t - 1) && (!r.formulaFields()[e + 1].setupFormula.isParenthesesEnd() && !r.formulaFields()[e].setupFormula.isParenthesesStart()) }, r.isConstantOperation = function (e) { var t = r.formulaFields().length; return !(t <= 1 || e == t - 1 || e == t) && r.formulaFields()[e + 1].setupFormula.isConstantValue() }, r.addFormulaParentheses = function () { if (!(r.formulaFields().length <= 0 || r.formulaFields()[0].setupFormula.isParenthesesStart() && r.formulaFields()[r.formulaFields().length - 1].setupFormula.isParenthesesEnd())) { var e = r.getEmptyFormulaField(), t = r.setupField(Object.assign({}, e)), o = r.setupField(Object.assign({}, e)); t.setupFormula.isParenthesesStart(!0), o.setupFormula.isParenthesesEnd(!0), r.formulaFields.splice(0, 0, t), r.formulaFields.push(o) } }, r.addFormulaConstantValue = function () { var e = r.getEmptyFormulaField(), t = r.setupField(Object.assign({}, e)); t.setupFormula.isConstantValue(!0), r.formulaFields.push(t) }, r.isFieldValidForYAxis = function (e, t, o) { return !(e > 0 && "Bar" == r.ReportType() && ["Int", "Double", "Money"].indexOf(t) < 0 && "Count" != o) }, r.isChart = ko.computed((function () { return ["List", "Summary", "Single"].indexOf(r.ReportType()) < 0 })), r.isFieldValidForSubGroup = function (e, r) { return !(e > 0 && ["Int", "Double", "Money"].indexOf(r) < 0) }, r.canDrilldown = ko.computed((function () { return ["List"].indexOf(r.ReportType()) < 0 })), r.dateFields = ko.computed((function () { return _.filter(r.SelectedFields(), (function (e) { return "DateTime" == e.fieldType })) })), r.TotalSeries = ko.observable(0), r.AllSqlQuries = ko.observable(""), r.canAddSeries = ko.computed((function () { var e = r.dateFields().length > 0 && ["Group", "Bar", "Line"].indexOf(r.ReportType()) >= 0 && "DateTime" == r.SelectedFields()[0].fieldType, t = _.filter(r.FilterGroups(), (function (e) { return _.filter(e.Filters(), (function (e) { return "range" == e.Operator() && e.Value() && 0 == e.Value().indexOf("This") })).length > 0 })).length > 0; return e && t })), r.canAddSeries.subscribe((function (e) { e || r.AdditionalSeries([]) })), r.AddSeries = function (e) { e = e || {}; var t = ko.observable(); e.Field ? t(r.FindField(e.Field().fieldId)) : t(r.dateFields()[0]); var o = ko.observableArray([]); function a(e) { o("This Year" === e ? ["Last Year", "2 Years ago", "3 Years ago", "4 Years ago", "5 Years ago"] : "This Month" === e ? ["Last Month", "2 Months ago", "3 Months ago", "4 Months ago", "5 Months ago"] : "This Week" === e ? ["Last Week", "2 Weeks ago", "3 Weeks ago", "4 Weeks ago", "5 Weeks ago"] : []) } _.forEach(r.FilterGroups(), (function (e) { _.forEach(e.Filters(), (function (e) { if (e.Field().FieldId == t().FieldId) return a(e.Value()), e.Value.subscribe((function (e) { a(e) })), !1 })) })), r.AdditionalSeries.push({ Field: t, Operator: ko.observable("Range"), Value: ko.observable(e.Value), Range: o }) }, r.canMoveUp = function () { return 1 == r.SelectFields().length && r.SelectedFields.indexOf(r.SelectFields()[0]) >= 1 }, r.canMoveDown = function () { return 1 == r.SelectFields().length && r.SelectedFields.indexOf(r.SelectFields()[0]) < r.SelectedFields().length - 1 }, r.MoveUp = function () { if (r.canMoveUp()) { var e = r.SelectFields()[0], t = r.SelectedFields.indexOf(e); if (t >= 1) { var o = r.SelectedFields(); r.SelectedFields.splice(t - 1, 2, o[t], o[t - 1]) } } }, r.MoveDown = function () { if (r.canMoveDown()) { var e = r.SelectFields()[0], t = r.SelectedFields.indexOf(e), o = r.SelectedFields(); t < o.length - 1 && r.SelectedFields.splice(t, 2, o[t + 1], o[t]) } }, r.RemoveField = function (e) { var t = r.SelectedTable(), o = _.find(r.Tables(), { tableName: e.tableName }); e.isFormulaField() || null != t && o.tableId == t.tableId ? r.SelectedFields.remove(e) : r.loadTableFields(o).done((function () { r.ChooseFields([]), r.SelectedFields.remove(e) })) }, r.RemoveSeries = function (e) { r.AdditionalSeries.remove(e) }, r.FindField = function (e) { return _.filter(r.SelectedFields(), (function (r) { return r.fieldId == e }))[0] }, r.SaveWithoutRun = function () { r.RunReport(!0) }, r.BuildFilterData = function (e) { var t = []; return _.forEach(e, (function (e) { var o = []; _.forEach(e.Filters(), (function (t, a) { var l = t.Apply() && t.IsFilterOnFly || !t.IsFilterOnFly ? { SavedReportId: r.ReportID(), FieldId: t.Field().fieldId, AndOr: 0 == a ? e.AndOr() : t.AndOr(), Operator: t.Operator(), Value1: "in" == t.Operator() || "not in" == t.Operator() ? t.ValueIn().join(",") : t.Operator().indexOf("blank") >= 0 ? "blank" : t.Value(), Value2: t.Value2(), Filters: 0 == a ? r.BuildFilterData(e.FilterGroups()) : [] } : null; null == l || l.Value1 || l.Value2 || (l = null), l && o.push(l) })), t.push({ SavedReportId: r.ReportID(), isRoot: e.isRoot, AndOr: e.AndOr(), Filters: o }) })), t }, r.SeriesDataIntoFilter = function (e, t) { var o = []; return _.forEach(e, (function (e) { var a = []; a.push(r.AdditionalSeries()[t]); var l = []; _.forEach(a, (function (t, o) { var a = { SavedReportId: r.ReportID(), FieldId: t.Field().fieldId, AndOr: "AND", Operator: t.Operator().toLowerCase(), Value1: "in" == t.Operator() || "not in" == t.Operator() ? t.ValueIn().join(",") : t.Operator().indexOf("blank") >= 0 ? "blank" : t.Value(), Filters: 0 == o ? r.BuildFilterData(e.FilterGroups()) : [] }; null == a || a.Value1 || a.Value2 || (a = null), a && l.push(a) })), o.push({ SavedReportId: r.ReportID(), isRoot: e.isRoot, AndOr: e.AndOr(), Filters: l }) })), o }, r.BuildReportData = function (t, o, a) { t = t || []; var l = null != _.find(r.SelectedFields(), (function (e) { return "Group in Detail" == e.selectedAggregate() })), n = o ? r.SeriesDataIntoFilter(r.FilterGroups(), a) : r.BuildFilterData(r.FilterGroups()); return { ReportID: r.ReportID(), ReportName: r.ReportName(), ReportDescription: r.ReportDescription(), FolderID: r.FolderID(), SelectedFieldIDs: _.map(r.SelectedFields(), (function (e) { return e.fieldId })), Filters: n, Series: _.map(r.AdditionalSeries(), (function (e) { return { SavedReportId: r.ReportID(), FieldId: e.Field().fieldId, Operator: e.Operator(), Value: e.Value() } })), IncludeSubTotals: r.IncludeSubTotal(), EditFiltersOnReport: r.EditFiltersOnReport(), ShowUniqueRecords: r.ShowUniqueRecords(), IsAggregateReport: !(t.length > 0 && !l) && r.AggregateReport(), ShowDataWithGraph: r.ShowDataWithGraph(), ShowOnDashboard: r.ShowOnDashboard(), SortBy: r.SortByField(), SortDesc: r.SortDesc(), SelectedSorts: _.map(r.SortFields(), (function (e) { return { FieldId: e.sortByFieldId(), Descending: e.sortDesc() } })), ReportType: r.ReportType(), UseStoredProc: r.useStoredProc(), StoredProcId: r.useStoredProc() ? r.SelectedProc().Id : null, GroupFunctionList: _.map(r.SelectedFields(), (function (e) { return { FieldID: e.fieldId, GroupFunc: e.selectedAggregate(), FilterOnFly: e.filterOnFly(), Disabled: e.disabled(), GroupInGraph: e.groupInGraph(), DontSubTotal: e.dontSubTotal(), HideInDetail: e.hideInDetail(), IsCustom: e.isFormulaField(), CustomLabel: e.fieldName, DataFormat: "None" == e.fieldFormat() ? null : e.fieldFormat(), CustomFieldDetails: _.map(e.formulaItems(), (function (e) { return { FieldId: e.fieldId(), IsParenthesesStart: e.isParenthesesStart() || !1, IsParenthesesEnd: e.isParenthesesEnd() || !1, Operation: e.formulaOperation(), ConstantValue: e.constantValue() } })), LinkField: e.linkField(), LinkFieldItem: e.linkField() ? e.linkFieldItem.toJs() : null, FieldLabel: e.fieldLabel(), DecimalPlaces: e.decimalPlaces(), FieldAlign: e.fieldAlign(), FontColor: e.fontColor(), BackColor: e.backColor(), HeaderFontColor: e.headerFontColor(), HeaderBackColor: e.headerBackColor(), FontBold: e.fontBold(), HeaderFontBold: e.headerFontBold(), FieldWidth: e.fieldWidth(), FieldConditionOp: e.fieldConditionOp(), FieldConditionVal: e.fieldConditionVal() } })), Schedule: r.scheduleBuilder.toJs(), DrillDownRow: t, UserId: r.manageAccess.getAsList(r.manageAccess.users), ViewOnlyUserId: r.manageAccess.getAsList(r.manageAccess.viewOnlyUsers), DeleteOnlyUserId: r.manageAccess.getAsList(r.manageAccess.deleteOnlyUsers), UserRoles: r.manageAccess.getAsList(r.manageAccess.userRoles), ViewOnlyUserRoles: r.manageAccess.getAsList(r.manageAccess.viewOnlyUserRoles), DeleteOnlyUserRoles: r.manageAccess.getAsList(r.manageAccess.deleteOnlyUserRoles), DataFilters: e.dataFilters, SelectedParameters: r.useStoredProc() ? _.map(r.Parameters(), (function (e) { return { UseDefault: "is default" == e.Operator(), ParameterId: e.Id, ParameterName: e.ParameterName, Value: e.Value(), Operator: e.Operator() } })) : [] } }, r.SaveFilterAndRunReport = function () { r.validateReport() ? (r.pager.currentPage(1), ajaxcall({ url: e.runReportApiUrl, type: "POST", data: JSON.stringify({ method: "/ReportApi/SaveReportFilter", SaveReport: !1, ReportJson: JSON.stringify(r.BuildReportData()), adminMode: r.adminMode(), SubTotalMode: !1 }) }), r.RunReport(!1)) : toastr.error("Please correct validation issues") }, r.RunReport = function (t, o) { if (t = !0 === t, o = !0 === o, r.TotalSeries(r.AdditionalSeries().length), "Single" != r.ReportType() || 1 == r.enabledFields().length) if (o || r.validateReport()) { var a = 0, l = !1, n = !1, i = null, s = r.AdditionalSeries().length, d = []; do { a > 0 && (l = !0, r.CanSaveReports(!1)), d.push(ajaxcall({ url: e.runReportApiUrl, type: "POST", data: JSON.stringify({ method: "/ReportApi/RunReport", SaveReport: !!r.CanSaveReports() && r.SaveReport(), ReportJson: JSON.stringify(r.BuildReportData([], l, a - 1)), adminMode: r.adminMode(), SubTotalMode: !1 }), async: !1 }).done((function (e) { e.d && (e = e.d), e.result && (e = e.result), i = e, r.AllSqlQuries(r.AllSqlQuries() + (e.sql + ",")), r.ReportID(e.reportId), r.SaveReport() && t && 0 === s && (toastr.success("Report Saved"), r.AllSqlQuries(""), r.LoadAllSavedReports(!0)), t || "execute" != r.ReportMode() && "dashboard" != r.ReportMode() || (n = !0, r.ExecuteReportQuery(e.sql, e.connectKey, r.ReportSeries)) }))), a++ } while (a < s + 1); $.when.apply($, d).done((function () { if (!1 === n) { if (t) return; e.samePageOnRun ? (e.reportWizard.modal("hide"), r.ReportID(i.reportId), r.ExecuteReportQuery(i.sql, i.connectKey), r.ReportMode("execute")) : redirectToReport(e.runReportUrl, { reportId: i.reportId, reportName: r.ReportName(), reportDescription: r.ReportDescription(), includeSubTotal: r.IncludeSubTotal(), showUniqueRecords: r.ShowUniqueRecords(), aggregateReport: r.AggregateReport(), showDataWithGraph: r.ShowDataWithGraph(), reportSql: r.AllSqlQuries(), connectKey: i.connectKey, reportFilter: JSON.stringify(_.map(r.FlyFilters(), (function (e) { return ko.toJS(e) }))), reportType: r.ReportType(), selectedFolder: null != r.SelectedFolder() ? r.SelectedFolder().Id : 0, reportSeries: _.map(r.AdditionalSeries(), (function (e, r) { return e.Value() })) }) } })) } else toastr.error("Please correct validation issues"); else toastr.error("All fields except one must be hidden for Single Value Report") }, r.ExecuteReportQuery = function (t, o, a) { if (t && o) return ajaxcall({ url: e.execReportUrl, type: "POST", data: JSON.stringify({ reportSql: t, connectKey: o, reportType: r.ReportType(), pageNumber: r.pager.currentPage(), pageSize: r.pager.pageSize(), sortBy: r.pager.sortColumn() || "", desc: r.pager.sortDescending() || !1, ReportSeries: a }) }).done((function (l) { l.d && (l = l.d), l.result && (l = l.result); var n = r.ReportResult(); function i(e, r) { return e == r || !(r.indexOf("(Count)") < 0 && r.indexOf("(Avg)") < 0 && r.indexOf("(Sum)") < 0 && r.indexOf("(Average)") < 0) && (r = (r || "").replace("(Count)", "").replace("(Avg)", "").replace("(Average)", "").replace("(Sum)", "").trim(), (e = ((e = (e || "").trim()).endsWith("Id") || e.endsWith("ID") ? e.slice(0, -2) : e).trim()) == r) } function s(e) { r.columnDetails([]), _.forEach(e, (function (e, t) { var o; r.useStoredProc() ? (o = _.find(r.SelectedFields(), (function (r) { return i(r.procColumnName, e.ColumnName) })), e.hideStoredProcColumn = !o || o.disabled()) : o = _.find(r.SelectedFields(), (function (r) { return i(r.fieldName, e.ColumnName) })), o && o.linkField() ? (e.linkItem = o.linkFieldItem.toJs(), e.linkField = !0) : (e.linkItem = {}, e.linkField = !1), o = ko.toJS(o || { fieldName: e.ColumnName }), r.columnDetails.push(o), e.decimalPlaces = o.decimalPlaces, e.fieldAlign = o.fieldAlign, e.fieldConditionOp = o.fieldConditionOp, e.fieldConditionVal = o.fieldConditionVal, e.fieldFormat = o.fieldFormat, e.fieldLabel = o.fieldLabel, e.fieldName = o.fieldName, e.fieldWidth = o.fieldWidth, e.fontBold = o.fontBold, e.headerFontBold = o.headerFontBold, e.headerFontColor = o.headerFontColor, e.headerBackColor = o.headerBackColor, e.fieldId = o.fieldId, e.fontColor = o.fontColor, e.backColor = o.backColor, e.groupInGraph = o.groupInGraph, e.dontSubTotal = o.dontSubTotal })) } function d(t, o) { _.forEach(t, (function (t, a) { t.LinkTo = ""; var l = o[a]; if (l && l.linkField) { var n = l.linkItem, i = ""; n.LinksToReport ? (i = e.runLinkReportUrl + "?reportId=" + n.LinkedToReportId, n.SendAsFilterParameter && (i += "&filterId=" + n.SelectedFilterId + "&filterValue=" + t.Value)) : i = n.LinkToUrl + (n.SendAsQueryParameter ? "?" + n.QueryParameterName + "=" + t.LabelValue : ""), t.LinkTo = i } if (l = l || {}, t.backColor = l.backColor, t.fieldAlign = l.fieldAlign, t.fieldWidth = l.fieldWidth, t.fontBold = l.fontBold, t.fontColor = l.fontColor, t.fieldId = l.fieldId, r.decimalFormatTypes.indexOf(l.fieldFormat) >= 0) switch (t.FormattedValue = r.formatNumber(t.Value, l.decimalPlaces), l.fieldFormat) { case "Currency": t.FormattedValue = "$" + t.FormattedValue; break; case "Percentage": t.FormattedValue = t.FormattedValue + "%" }if (r.dateFormatTypes.indexOf(l.fieldFormat) >= 0) switch (l.fieldFormat) { case "Date": t.FormattedValue = new Date(t.Value).toLocaleDateString("en-US", { year: "numeric", month: "numeric", day: "numeric" }); break; case "Date and Time": t.FormattedValue = new Date(t.Value).toLocaleDateString("en-US", { year: "numeric", month: "numeric", day: "numeric", hour: "numeric", minute: "numeric", second: "numeric" }); break; case "Time": t.FormattedValue = new Date(t.Value).toLocaleTimeString("en-US", { hour: "numeric", minute: "numeric", second: "numeric" }) } })) } n.HasError(l.HasError), n.Exception(l.Exception), n.Warnings(l.Warnings), n.ReportDebug(l.ReportDebug), n.ReportSql(l.ReportSql), r.ReportSeries = a, s(l.ReportData.Columns), r.useStoredProc() && (l.ReportData.Columns = _.filter(l.ReportData.Columns, (function (e) { return 0 == e.hideStoredProcColumn }))); var u = _.map(l.ReportData.Columns, "SqlField"); l.ReportData.IsDrillDown = ko.observable(!1), _.forEach(l.ReportData.Rows, (function (t) { t.DrillDownData = ko.observable(null), t.pager = new pagerViewModel({ pageSize: 10 }), t.sql = "", t.connectKey = "", t.changeSort = function (e) { return t.pager.changeSort(e), t.execute(), !1 }, t.isExpanded = ko.observable(!1), t.execute = function () { "" != t.sql && ajaxcall({ url: e.execReportUrl, type: "POST", data: JSON.stringify({ reportSql: t.sql, connectKey: t.connectKey, reportType: "List", pageNumber: t.pager.currentPage(), pageSize: t.pager.pageSize(), sortBy: t.pager.sortColumn() || "", desc: t.pager.sortDescending() || !1, ReportSeries: a }) }).done((function (e) { e.d && (e = e.d), e.result && (e = e.result), e.ReportData.IsDrillDown = ko.observable(!0), s(e.ReportData.Columns), _.forEach(e.ReportData.Rows, (function (r) { d(r.Items, e.ReportData.Columns) })), t.DrillDownData(e.ReportData), t.pager.totalRecords(e.Pager.TotalRecords), t.pager.pages(e.Pager.TotalPages) })) }, t.expand = function (o) { ajaxcall({ url: e.runReportApiUrl, type: "POST", data: JSON.stringify({ method: "/ReportApi/RunDrillDownReport", SaveReport: !1, ReportJson: JSON.stringify(r.BuildReportData(t.Items)), adminMode: r.adminMode(), SubTotalMode: !1 }) }).done((function (e) { e.d && (e = e.d), e.result && (e = e.result), t.sql = e.sql, t.connectKey = e.connectKey, r.expandSqls.push({ index: o, sql: t.sql }), t.execute() })), t.isExpanded(!0) }, t.pager.currentPage.subscribe((function () { t.execute() })), t.collapse = function () { t.isExpanded(!1) }, t.toggle = function () { t.isExpanded() ? t.collapse() : t.expand() }, r.useStoredProc() && (t.Items = _.filter(t.Items, (function (e) { return _.includes(u, e.Column.SqlField) }))), d(t.Items, l.ReportData.Columns) })), n.ReportData(l.ReportData), r.pager.totalRecords(l.Pager.TotalRecords), r.pager.pages(l.Pager.TotalPages), r.currentSql(t), r.currentConnectKey(o), l.Warnings && toastr.info("Note: " + l.Warnings), r.isChart() && (google.charts.load("current", { packages: ["corechart", "geochart"] }), google.charts.setOnLoadCallback(r.DrawChart)), r.IncludeSubTotal() && ajaxcall({ url: e.runReportApiUrl, type: "POST", data: JSON.stringify({ method: "/ReportApi/RunReport", SaveReport: !!r.CanSaveReports() && r.SaveReport(), ReportJson: JSON.stringify(r.BuildReportData()), adminMode: r.adminMode(), SubTotalMode: !0 }) }).done((function (t) { t.d && (t = t.d), t.result && (t = t.result), ajaxcall({ url: e.execReportUrl, type: "POST", data: JSON.stringify({ reportSql: t.sql, connectKey: t.connectKey, reportType: r.ReportType(), pageNumber: 1, pageSize: 1, sortBy: "", desc: !1, ReportSeries: null }) }).done((function (e) { e.d && (e = e.d), e.result && (e = e.result), s(e.ReportData.Columns), _.forEach(e.ReportData.Rows, (function (r) { d(r.Items, e.ReportData.Columns) })), r.ReportResult().SubTotals(e.ReportData.Rows) })) })), setTimeout((function () { r.allowTableResize() }), 2e3) })) }, r.expandSqls = ko.observableArray([]), r.ExpandAll = function () { r.expandSqls([]); var e = 0; _.forEach(r.ReportResult().ReportData().Rows, (function (r) { r.expand(e++) })), r.allExpanded(!0) }, r.CollapseAll = function () { _.forEach(r.ReportResult().ReportData().Rows, (function (e) { e.collapse() })), r.allExpanded(!1), r.expandSqls([]) }, r.getExpandSqls = ko.computed((function () { return r.allExpanded() && 0 != r.expandSqls().length ? _.map(_.orderBy(r.expandSqls(), "index"), (function (e) { return e.sql })) : [] })), r.getColumnDetails = ko.computed((function () { return JSON.stringify(r.columnDetails()) })), r.skipDraw = !0 === e.skipDraw, r.DrawChart = function () { if (r.isChart() && !0 !== r.skipDraw) { var e = r.ReportResult().ReportData(), t = new google.visualization.DataTable, o = [], a = []; _.forEach(e.Columns, (function (e, o) { r.SelectedFields()[o]; 0 == o ? t.addColumn(e.IsNumeric ? "number" : "string", e.fieldLabel || e.ColumnName) : e.IsNumeric && !e.groupInGraph && a.push({ index: o, column: e.fieldLabel || e.ColumnName }) })), 0 == o.length && _.forEach(e.Columns, (function (e, r) { r > 0 && e.IsNumeric && !e.groupInGraph && t.addColumn(e.IsNumeric ? "number" : "string", e.fieldLabel || e.ColumnName) })); var l = [], n = []; _.forEach(e.Rows, (function (r) { var i = []; _.forEach(r.Items, (function (r, s) { var d = e.Columns[s]; if (0 == s) o.length > 0 && (i = _.filter(l, (function (e) { return e[0] == r.Value }))).length > 0 ? (l = l.filter((function (e) { return e[0] != r.Value })), i = i[0]) : i.push((r.Column.IsNumeric ? parseInt(r.Value) : r.Value) || (r.Column.IsNumeric ? 0 : "")); else if (o.length > 0) { 1 == _.filter(o, (function (e) { return e.index == s })).length ? 0 == _.filter(n, (function (e) { return e == r.Value })).length && (n.push(r.Value || ""), _.forEach(a, (function (e) { t.addColumn("number", r.Value + (0 == e ? "" : "-" + e)) }))) : r.Column.IsNumeric && i.push((r.Column.IsNumeric ? parseInt(r.Value) : r.Value) || (r.Column.IsNumeric ? 0 : "")) } else r.Column.IsNumeric && !d.groupInGraph && i.push((r.Column.IsNumeric ? parseInt(r.Value) : r.Value) || (r.Column.IsNumeric ? 0 : "")) })), l.push(i) })), _.forEach(l, (function (e) { if (e.length != t.getNumberOfColumns()) for (var r = 0; r <= t.getNumberOfColumns() - e.length; r++)e.push(0) })), t.addRows(l); var i = { title: r.ReportName(), animation: { startup: !0, duration: 1e3, easing: "out" } }, s = document.getElementById("chart_div_" + r.ReportID()), d = null; "Pie" == r.ReportType() && (d = new google.visualization.PieChart(s)), "Bar" == r.ReportType() && (d = new google.visualization.ColumnChart(s)), "Line" == r.ReportType() && (d = new google.visualization.LineChart(s)), "Map" == r.ReportType() && (d = new google.visualization.GeoChart(s)), d.draw(t, i), r.ChartData(d.getImageURI()) } }, r.loadFolders = function (t) { return ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetFolders", model: JSON.stringify({ adminMode: r.adminMode() }) } }).done((function (e) { if (e.d && (e = e.d), e.result && (e = e.result), r.Folders(e), r.SelectedFolder(null), t) { var o = _.filter(e, (function (e) { return e.Id == t })); o.length > 0 && r.SelectedFolder(o[0]) } })) }, r.editLinkField = ko.observable(), r.editFieldOptions = ko.observable(), r.setupField = function (t) { t.selectedFieldName = t.tableName + " > " + t.fieldName, t.fieldAggregateWithDrilldown = t.fieldAggregate.concat("Only in Detail").concat("Group in Detail"), t.selectedAggregate = ko.observable(t.aggregateFunction), t.filterOnFly = ko.observable(t.filterOnFly), t.disabled = ko.observable(t.disabled), t.groupInGraph = ko.observable(t.groupInGraph), t.dontSubTotal = ko.observable(t.dontSubTotal), t.hideInDetail = ko.observable(t.hideInDetail), t.linkField = ko.observable(t.linkField), t.linkFieldItem = new linkFieldViewModel(t.linkFieldItem, e), t.isFormulaField = ko.observable(t.isFormulaField), t.fieldFormat = ko.observable(t.fieldFormat), t.fieldLabel = ko.observable(t.fieldLabel), t.decimalPlaces = ko.observable(t.decimalPlaces), t.fieldAlign = ko.observable(t.fieldAlign), t.fontColor = ko.observable(t.fontColor), t.backColor = ko.observable(t.backColor || "#ffffff"), t.headerFontColor = ko.observable(t.headerFontColor), t.headerBackColor = ko.observable(t.headerBackColor || "#ffffff"), t.fontBold = ko.observable(t.fontBold), t.headerFontBold = ko.observable(t.headerFontBold), t.fieldWidth = ko.observable(t.fieldWidth), t.fieldConditionOp = ko.observable(t.fieldConditionOp), t.fieldConditionVal = ko.observable(t.fieldConditionVal), t.applyAllHeaderFontColor = ko.observable(!1), t.applyAllHeaderBackColor = ko.observable(!1), t.applyAllFontColor = ko.observable(!1), t.applyAllBackColor = ko.observable(!1), t.applyAllBold = ko.observable(!1), t.applyAllHeaderBold = ko.observable(!1), t.toggleDisable = function () { !t.disabled() && r.enabledFields().length < 2 || t.disabled(!t.disabled()) }; var o = []; return _.forEach(t.formulaItems || [], (function (e) { o.push(new formulaFieldViewModel({ fieldId: e.fieldId || 0, isParenthesesStart: e.setupFormula ? e.setupFormula.isParenthesesStart() : e.isParenthesesStart, isParenthesesEnd: e.setupFormula ? e.setupFormula.isParenthesesEnd() : e.isParenthesesEnd, formulaOperation: e.setupFormula ? e.setupFormula.formulaOperation() : e.formulaOperation, constantValue: e.setupFormula ? e.setupFormula.constantValue() : e.constantValue })) })), t.formulaItems = ko.observableArray(o), t.setupFormula = new formulaFieldViewModel, t.setupLinkField = function () { r.editLinkField(t), e.linkModal && e.linkModal.modal("show") }, t.removeLinkField = function () { t.linkField(!1), t.linkFieldItem.clear(), e.linkModal && e.linkModal.modal("hide") }, t.saveLinkField = function () { t.linkFieldItem.validateLink() ? (t.linkField(!0), e.linkModal && e.linkModal.modal("hide")) : toastr.error("Please correct validation issues") }, t.setupFieldOptions = function () { r.currentFieldOptions = { fieldFormat: t.fieldFormat(), fieldLabel: t.fieldLabel(), decimalPlaces: t.decimalPlaces(), fieldAlign: t.fieldAlign(), fontColor: t.fontColor(), backColor: t.backColor(), headerFontColor: t.headerFontColor(), headerBackColor: t.headerBackColor(), fontBold: t.fontBold(), headerFontBold: t.headerFontBold(), fieldWidth: t.fieldWidth(), fieldConditionOp: t.fieldConditionOp(), fieldConditionVal: t.fieldConditionVal() }, r.editFieldOptions(t), e.fieldOptionsModal && e.fieldOptionsModal.modal("show") }, t.saveFieldOptions = function () { _.forEach(r.SelectedFields(), (function (e) { t.applyAllHeaderFontColor() && e.headerFontColor(t.headerFontColor()), t.applyAllHeaderBackColor() && e.headerBackColor(t.headerBackColor()), t.applyAllFontColor() && e.fontColor(t.fontColor()), t.applyAllBackColor() && e.backColor(t.backColor()), t.applyAllBold() && e.fontBold(t.fontBold()), t.applyAllHeaderBold() && e.headerFontBold(t.headerFontBold()) })), e.fieldOptionsModal && e.fieldOptionsModal.modal("hide") }, t.cancelFieldOptions = function () { t.fieldFormat(r.currentFieldOptions.fieldFormat), t.fieldLabel(r.currentFieldOptions.fieldLabel), t.fieldAlign(r.currentFieldOptions.fieldAlign), t.decimalPlaces(r.currentFieldOptions.decimalPlaces), t.fontColor(r.currentFieldOptions.fontColor), t.backColor(r.currentFieldOptions.backColor), t.headerFontColor(r.currentFieldOptions.headerFontColor), t.headerBackColor(r.currentFieldOptions.headerBackColor), t.fontBold(r.currentFieldOptions.fontBold), t.headerFontBold(r.currentFieldOptions.headerFontBold), t.fieldWidth(r.currentFieldOptions.fieldWidth), t.fieldConditionOp(r.currentFieldOptions.fieldConditionOp), t.fieldConditionVal(r.currentFieldOptions.fieldConditionVal), e.fieldOptionsModal && e.fieldOptionsModal.modal("hide") }, t }, r.PopulateReport = function (t, o, a) { r.ReportID(t.ReportID), r.ReportType(t.ReportType), r.ReportName(t.ReportName), r.ReportDescription(t.ReportDescription), r.FolderID(t.FolderID), r.ChosenFields([]), r.SelectFields([]), r.SelectedField(null), r.manageAccess.setupList(r.manageAccess.users, t.UserId || ""), r.manageAccess.setupList(r.manageAccess.userRoles, t.UserRoles || ""), r.manageAccess.setupList(r.manageAccess.viewOnlyUserRoles, t.ViewOnlyUserRoles || ""), r.manageAccess.setupList(r.manageAccess.viewOnlyUsers, t.ViewOnlyUserId || ""), r.manageAccess.setupList(r.manageAccess.deleteOnlyUserRoles, t.DeleteOnlyUserRoles || ""), r.manageAccess.setupList(r.manageAccess.deleteOnlyUsers, t.DeleteOnlyUserId || ""), r.IncludeSubTotal(t.IncludeSubTotals), r.EditFiltersOnReport(t.EditFiltersOnReport), r.ShowUniqueRecords(t.ShowUniqueRecords), r.AggregateReport(t.IsAggregateReport), r.ShowDataWithGraph(t.ShowDataWithGraph), r.ShowOnDashboard(t.ShowOnDashboard), r.SortByField(t.SortBy), r.SortDesc(t.SortDesc), r.pager.sortDescending(t.SortDesc); var l = _.find(r.SavedReports(), { reportId: t.ReportID }) || { canEdit: !1 }; r.CanEdit(l.canEdit || r.adminMode()), r.FilterGroups([]), r.AdditionalSeries([]), r.SortFields([]), r.scheduleBuilder.fromJs(t.Schedule), r.HideReportHeader(t.HideReportHeader), r.useReportHeader(t.UseReportHeader && !t.HideReportHeader), "execute" == r.ReportMode() && (r.useReportHeader() ? (r.headerDesigner.init(!0), r.headerDesigner.loadCanvas(!0)) : r.headerDesigner.dispose()); var n = []; function i(e, t) { e && 0 != e.length && _.forEach(e, (function (e) { if (e.FieldId) { if (n.indexOf(e.FieldId) < 0) { var o = _.filter(r.SelectedFields(), (function (r) { return 1 == r.filterOnFly() && r.fieldId == e.FieldId })).length > 0; o && n.push({ fieldId: e.FieldId }), null == t && (t = r.FilterGroups()[0]), t.AddFilter(e, o) } } else t = null == t ? r.FilterGroups()[0] : t.AddFilterGroup({ AndOr: e.AndOr }); i(e.Filters, t) })) } if (1 == o) { if (e.reportFilter && "[]" != e.reportFilter) { var s = JSON.parse(e.reportFilter); _.forEach(s, (function (e) { var t = _.filter(n, (function (r) { return r.fieldId == e.Field.fieldId })); t.length > 0 && (e.FieldId = e.Field.fieldId, e.Value1 = e.Value, n.push(t[0]), r.FilterGroups()[0].AddFilter(e, !0)) })) } i(t.Filters) } else i(t.Filters); if (_.forEach(t.Series, (function (e) { r.AddSeries(e) })), _.forEach(t.SelectedSorts, (function (e) { r.addSortField(e.FieldId, e.Descending) })), r.SaveReport(!o && r.CanEdit()), !a && r.AdditionalSeries().length > 0 && (a = _.map(r.AdditionalSeries(), (function (e, r) { return e.Value() })).join(",")), "execute" == r.ReportMode() || "dashboard" == r.ReportMode()) return r.ExecuteReportQuery(e.reportSql, e.reportConnect, a) }, r.LoadReport = function (t, o, a) { return r.SelectedTable(null), r.isFormulaField(!1), ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/LoadReport", model: JSON.stringify({ reportId: t, adminMode: r.adminMode(), userIdForSchedule: r.userIdForSchedule }) } }).done((function (e) { if (e.d && (e = e.d), e.result && (e = e.result), r.useStoredProc(e.UseStoredProc), r.ReportType(e.ReportType), !r.useStoredProc()) return _.forEach(e.SelectedFields, (function (e) { e = r.setupField(e) })), r.SelectedFields(e.SelectedFields), r.PopulateReport(e, o, a); { function t() { var t = _.find(r.Procs(), { Id: e.StoredProcId }); if (t) return t.SelectedFields = e.SelectedFields, t.SelectedParameters = e.SelectedParameters, r.SelectedProc(t), r.PopulateReport(e, o, a) } 0 == r.Procs().length ? r.loadProcs().done((function () { t() })) : t() } })) }, r.LoadAllSavedReports = function (t) { ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetSavedReports", model: JSON.stringify({ adminMode: r.adminMode() }) } }).done((function (o) { o.d && (o = o.d), o.result && (o = o.result), _.forEach(o, (function (o) { o.runMode = !1, o.openReport = function () { return r.LoadReport(o.reportId).done((function () { o.runMode ? (r.SaveReport(!1), r.RunReport(!1, !0), o.runMode = !1) : r.ReportMode("generate") })) }, o.copyReport = function () { o.openReport().done((function () { r.ReportID(0), r.ReportName("Copy of " + r.ReportName()), r.CanEdit(!0), r.SaveReport(!0) })) }, o.runReport = function () { o.runMode = !0, o.openReport() }, o.deleteReport = function () { bootbox.confirm("Are you sure you would like to Delete this Report?", (function (t) { t && ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/DeleteReport", model: JSON.stringify({ reportId: o.reportId }) } }).done((function () { r.SavedReports.remove(o) })) })) }, e.reportId > 0 && o.reportId == e.reportId && !0 !== t && (o.openReport(), e.reportWizard.modal("show")) })), r.SavedReports(o) })) }, "dashboard" != r.ReportMode() && r.loadFolders().done((function () { r.LoadAllSavedReports(), ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/CanSaveReports", model: "{}" } }).done((function (e) { e.d && (e = e.d), e.result && (e = e.result), e = e || { allowUsersToCreateReports: !0, allowUsersToManageFolders: !0 }, r.CanSaveReports(e.allowUsersToCreateReports), r.CanManageFolders(e.allowUsersToManageFolders) })) })), r.changeSort = function (e) { return r.pager.changeSort(e), r.ExecuteReportQuery(r.currentSql(), r.currentConnectKey(), r.ReportSeries), !1 }, r.formatNumber = function (e, r) { return null === r && (r = 2), r = isNaN(r = Math.abs(r)) ? 2 : r, parseFloat(e).toFixed(r).replace(/\B(?=(\d{3})+(?!\d))/g, ",") }, r.isInputValid = function (e) { return (null == $(e).attr("data-notempty") || 0 != $(e).children("option").length) && (e.validity ? e.validity.valid : null == $(e).attr("required") || "" != $(e).val()) }, r.validateReport = function () { if (null != e.reportWizard) { var t = e.reportWizard.find("input,select"), o = !0; $(".needs-validation").removeClass("was-validated"); for (var a = 0; a < t.length; a++)$(t[a]).removeClass("is-invalid"), r.isInputValid(t[a]) || (o = !1, $(".needs-validation").addClass("was-validated"), $(t[a]).addClass("is-invalid")); return _.forEach(r.SavedReports(), (function (e) { if (e.reportName == r.ReportName() && e.reportId != r.ReportID()) return o = !1, toastr.error("Report name is already in use, please choose a different name"), !1 })), o } }, r.loadProcs = function () { return ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetProcedures", model: JSON.stringify({ adminMode: r.adminMode() }) } }).done((function (e) { e.d && (e = e.d), e.result && (e = e.result), r.Procs(e) })) }, r.loadTables = function () { ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetTables", model: JSON.stringify({ adminMode: r.adminMode() }) } }).done((function (e) { e.d && (e = e.d), e.result && (e = e.result), r.Tables(e) })) }, r.init = function (e, t) { if (t) $("#noaccountModal").modal("show"); else { r.loadFolders(e), r.loadTables(), r.loadProcs(); var o = !1; localStorage && (o = localStorage.getItem("reportAdminMode")), "true" === o && r.adminMode(!0) } }, r.allowTableResize = function () { var t, o; Array.prototype.forEach.call(document.querySelectorAll(".report-inner table th"), (function (e) { e.style.position = "relative"; var r = document.createElement("div"); r.innerHTML = "&nbsp;", r.style.top = 0, r.style.right = 0, r.style.bottom = 0, r.style.width = "5px", r.style.position = "absolute", r.style.cursor = "col-resize", r.addEventListener("mousedown", (function (r) { t = e, o = e.offsetWidth - r.pageX })), e.appendChild(r) })), document.addEventListener("mousemove", (function (e) { t && (t.style.width = o + e.pageX + "px") })), document.addEventListener("mouseup", (function () { if (t && t.id && t.style) { var o = _.find(r.SelectedFields(), { fieldId: parseInt(t.id) }); o && o.fieldWidth(t.style.width), ajaxcall({ url: e.apiUrl, noBlocking: !0, data: { method: "/ReportApi/UpdateReportColumnWidth", model: JSON.stringify({ width: t.style.width, fieldId: parseInt(t.id), reportId: parseInt(r.ReportID()) }) } }) } t = void 0 })) } }, dashboardViewModel = function (e) { var r = this; e.isDashboard = !0, r.dashboards = ko.observableArray(e.dashboards || []), r.adminMode = ko.observable(!1), r.currentUserId = e.userId, r.currentUserRole = (e.currentUserRole || []).join(), r.reportsAndFolders = ko.observableArray([]), r.allowAdmin = ko.observable(e.allowAdmin); var t = e.dashboardId > 0 ? _.find(r.dashboards(), { id: e.dashboardId }) || { name: "", description: "" } : r.dashboards().length > 0 ? r.dashboards()[0] : { name: "", description: "" }; r.dashboard = { Id: ko.observable(t.id), Name: ko.observable(t.name), Description: ko.observable(t.description), manageAccess: manageAccess(e) }, r.currentDashboard = ko.observable(t), r.selectDashboard = ko.observable(t.id), r.selectDashboard.subscribe((function (e) { e != r.currentDashboard().id && (window.location = window.location.href.split("?")[0] + "?id=" + e) })), r.newDashboard = function () { r.dashboard.Id(0), r.dashboard.Name(""), r.dashboard.Description(""), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.users, ""), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.userRoles, ""), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.viewOnlyUserRoles, ""), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.viewOnlyUsers, ""), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.deleteOnlyUserRoles, ""), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.deleteOnlyUsers, ""), _.forEach(r.reportsAndFolders(), (function (e) { _.forEach(e.reports, (function (e) { e.selected(!1) })) })) }, r.editDashboard = function () { r.dashboard.Id(r.currentDashboard().id), r.dashboard.Name(r.currentDashboard().name), r.dashboard.Description(r.currentDashboard().description), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.users, r.currentDashboard().userId || ""), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.userRoles, r.currentDashboard().userRoles || ""), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.viewOnlyUserRoles, r.currentDashboard().viewOnlyUserRoles || ""), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.viewOnlyUsers, r.currentDashboard().viewOnlyUserId || ""), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.deleteOnlyUserRoles, r.currentDashboard().deleteOnlyUserRoles || ""), r.dashboard.manageAccess.setupList(r.dashboard.manageAccess.deleteOnlyUsers, r.currentDashboard().deleteOnlyUserId || ""); var e = (r.currentDashboard().selectedReports || "").split(","); _.forEach(r.reportsAndFolders(), (function (r) { _.forEach(r.reports, (function (r) { r.selected(e.indexOf(r.reportId.toString()) >= 0) })) })) }, r.saveDashboard = function () { if ($(".form-group").removeClass("needs-validation"), !r.dashboard.Name()) return $("#add-dash-name").closest(".form-group").addClass("needs-validation"), !1; var t = ""; _.forEach(r.reportsAndFolders(), (function (e) { _.forEach(e.reports, (function (e) { e.selected() && (t += (t ? "," : "") + e.reportId) })) })); var o = { id: r.dashboard.Id() || 0, name: r.dashboard.Name(), description: r.dashboard.Description(), selectedReports: t, userIdAccess: r.dashboard.manageAccess.getAsList(r.dashboard.manageAccess.users), viewOnlyUserId: r.dashboard.manageAccess.getAsList(r.dashboard.manageAccess.viewOnlyUsers), deleteOnlyUserId: r.dashboard.manageAccess.getAsList(r.dashboard.manageAccess.deleteOnlyUsers), userRolesAccess: r.dashboard.manageAccess.getAsList(r.dashboard.manageAccess.userRoles), viewOnlyUserRoles: r.dashboard.manageAccess.getAsList(r.dashboard.manageAccess.viewOnlyUserRoles), deleteOnlyUserRoles: r.dashboard.manageAccess.getAsList(r.dashboard.manageAccess.deleteOnlyUserRoles), adminMode: r.adminMode() }; return ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/SaveDashboard", model: JSON.stringify(o) } }).done((function (e) { e.d && (e = e.d), e.result && (e = e.result), toastr.success("Dashboard saved successfully"), setTimeout((function () { window.location = window.location.href.split("?")[0] + "?id=" + e.id }), 500) })), !0 }, r.deleteDashboard = function () { bootbox.confirm("Are you sure you would like to Delete this Dashboard?", (function (t) { t && ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/DeleteDashboard", model: JSON.stringify({ id: r.currentDashboard().id, adminMode: r.adminMode() }) } }).done((function (e) { toastr.success("Dashboard deleted successfully"), setTimeout((function () { window.location = window.location.href.split("?")[0] }), 500) })) })) }, r.reports = ko.observableArray([]); var o = 0; _.forEach(e.reports, (function (t) { var a = new reportViewModel({ runReportUrl: e.runReportUrl, execReportUrl: e.execReportUrl, reportWizard: e.reportWizard, lookupListUrl: e.lookupListUrl, runReportApiUrl: e.runReportApiUrl, apiUrl: e.apiUrl, reportFilter: t.reportFilter, reportMode: "dashboard", reportSql: t.reportSql, reportId: t.reportId, reportConnect: t.connectKey, users: e.users, userRoles: e.userRoles, skipDraw: !0 }); a.x = ko.observable(t.x), a.y = ko.observable(t.y), a.width = ko.observable(t.width), a.height = ko.observable(t.height), a.panelStyle = "panel-" + (0 == o ? "default" : 1 == o ? "info" : 2 == o ? "warning" : "danger"), o = 3 == o ? 0 : o + 1, r.reports.push(a), a.LoadReport(t.reportId, !0, ""), a.showFlyFilters = ko.observable(!1), a.toggleFlyFilters = function () { a.showFlyFilters(!a.showFlyFilters()) } })), r.drawChart = function () { _.forEach(r.reports(), (function (e) { e.skipDraw = !1, e.DrawChart() })) }, r.updatePosition = function (t) { t && t.id && ajaxcall({ url: e.apiUrl, noBlocking: !0, data: { method: "/ReportApi/UpdateDashboardReportPosition", model: JSON.stringify({ x: t.x, y: t.y, width: t.width, height: t.height, dashboardId: r.currentDashboard().id, reportId: parseInt(t.id) }) } }) }, r.init = function () { var t = !1; localStorage && (t = localStorage.getItem("reportAdminMode")), "true" === t && r.adminMode(!0); return $.when(ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetSavedReports", model: JSON.stringify({ adminMode: r.adminMode() }) } }), ajaxcall({ url: e.apiUrl, data: { method: "/ReportApi/GetFolders", model: JSON.stringify({ adminMode: r.adminMode() }) } })).done((function (e, t) { var o = []; t[0].d && (t[0] = t[0].d), e[0].d && (e[0] = e[0].d), t[0].result && (t[0] = t[0].result), e[0].result && (e[0] = e[0].result), _.forEach(t[0], (function (r) { var t = _.filter(e[0], { folderId: r.Id }); o.push({ folderId: r.Id, folder: r.FolderName, reports: _.map(t, (function (e) { return { reportId: e.reportId, reportName: e.reportName, reportDescription: e.reportDescription, reportType: e.reportType, selected: ko.observable(!1) } })) }) })), r.reportsAndFolders(o) })) }, r.adminMode.subscribe((function (e) { localStorage && localStorage.setItem("reportAdminMode", e) })) };